@meta(title:"Docz — A tiny, fast, ergonomic documentation engine", author:"Docz Authors")

@style(mode:"global")
# Core typographic rhythm (these are defaults; override in your theme)
heading-level-1: font-size=38px, font-weight=700
heading-level-2: font-size=28px, font-weight=600
heading-level-3: font-size=22px, font-weight=600
body-text: line-height=1.7
@end

# Docz

**Docz** is a compact documentation engine and file format built for speed, clarity, and *developer ergonomics*.  
Write in `.dcz`, render to HTML, and get a live local preview with hot‑reload. Out of the box, Docz supports **bold**, *italic*, inline `code`, [links](https://ziglang.org), fenced code blocks, and LaTeX math via KaTeX.

## Highlights

- Tiny binary, zero‑node runtime; batteries included.
- Fast live preview with auto‑reload.
- First‑class KaTeX math (vendored, offline‑friendly).
- Optional TailwindCSS theme (vendored or monorepo‑built).
- Pragmatic `.dcz` shorthand with room to grow: simple writing flow now, power features later.

## Quick Start

@code(lang:"bash")
# Build and run the CLI
zig build

# Preview an example document
zig build run -- run ./examples/hello.dcz
@end

Open the printed URL in your browser. Edits to `hello.dcz` will auto‑reload.

## Status

Docz is under **active development**. The CLI and the preview server are stable enough for experimentation, and the `.dcz` shorthand includes the essentials while we iterate toward the full spec.

## The `.dcz` Basics

Headings, paragraphs, inline styling, links, code blocks, and display math:

@code(lang:"text")
# Hello, Docz!
This is **bold**, *italic*, and `inline code`, plus a [link](https://ziglang.org).
@end

@math
E = mc^2
@end

@code(lang:"zig")
const std = @import("std");
pub fn main() !void {
    std.debug.print("Hello from Zig\\n", .{});
}
@end

### Notes

- Inline shortcuts work everywhere **except** inside `pre`, `code`, `script`, and `style`.
- `@math ... @end` produces a KaTeX display block (vendored into `third_party/katex/*`).
- `@code(lang:"...") ... @end` escapes HTML and sets a `language-<lang>` class for syntax highlighting by external tools/themes.

## Live Preview

The `run` subcommand compiles `.dcz` to a temporary directory and launches the built‑in preview server:

@code(lang:"bash")
zig build run -- run ./docs/SPEC.dcz
@end

The @style(class="color = red;) preview @end server exposes a small set of routes (used internally by the CLI and tests):

- `/view?path=docs/SPEC.dcz` — render a full HTML page
- `/render?path=docs/SPEC.dcz` — render body fragment
- `/third_party/...` — serves vendored assets (KaTeX, Tailwind theme)
- `/__docz_hot.txt` — file polled by the live‑reload script

## Themes & Tailwind

Docz ships with a **default Tailwind theme**. On build, the CLI looks for:

1. Monorepo build: `themes/default/dist/docz.tailwind.css`
2. Otherwise, the newest vendored theme under `third_party/tailwind/docz-theme-*/css/docz.tailwind.css`

If found, the CSS is copied next to the generated `index.html` and linked automatically.

### Building the monorepo theme (optional)

@code(lang:"bash")
# From the repository root:
cd themes/default
npm install
npm run build
# Result: themes/default/dist/docz.tailwind.css
@end

## Vendored Assets

Run once to fetch/verify external assets into `third_party/`:

@code(lang:"bash")
zig build vendor
@end

This will place KaTeX and the Docz Tailwind theme under versioned directories with checksums and a lock file.

## CLI Overview

@code(lang:"text")
Docz CLI Usage:
  docz build <file.dcz>       Build .dcz file to HTML
  docz preview                Start local preview server
  docz enable wasm            Enable WASM execution support (planned)

`docz run <file.dcz>` compiles to a temp dir and delegates to `preview`.
@end

## Repo Structure

@code(lang:"text")
docz/
├─ src/               # core, parser, renderer, CLI commands
├─ web-preview/       # preview server and hot-reload plumbing
├─ themes/default/    # optional Tailwind theme (monorepo build)
├─ third_party/       # vendored KaTeX and theme artifacts
├─ tests/             # unit, integration, and e2e tests
└─ tools/             # vendor bootstrap/verify tooling
@end

## Contributing

- Keep functions small and testable; prefer pure helpers.
- Write tests alongside behavior.
- Avoid hidden global state; pass allocators and buffers explicitly.
- Prefer clear, boring code over cleverness.

### Running the test suite

@code(lang:"bash")
zig build test-all --summary all
@end

## Roadmap

- Full `.dcz` parser with directive blocks (`@table`, `@graph`, etc.)
- Rich plugin system for import/export and rendering hooks
- Syntax‑highlighting pipeline and theme slots
- Optional WASM execution surface (guarded, secure)

## License

MIT — see `LICENSE`.

**Happy documenting!**
