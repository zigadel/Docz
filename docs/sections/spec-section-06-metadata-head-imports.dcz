@meta(title="Docz Spec — Section 6: Metadata, Imports & Head", author="Docz Authors")

# 6. Metadata, Imports & Head

Docz exposes a small set of **document-scoped primitives** that compile into the HTML `<head>`:
- `@meta` — declarative metadata (title, author, etc.).
- `@import(href=...)` — link external stylesheets.
- `@css ... @end` — embed raw CSS into a single `<style>` block.
- `@style(mode="global") ... @end` — declare **style aliases** (names → class lists) that you can reuse via inline `@style`.

These map cleanly to HTML and keep the body free of presentational noise.

## 6.1 Meta

Use `@meta` to set document metadata. Unrecognized keys are passed through as `<meta name="...">` pairs.

@code(lang="dcz")
@meta(
  title="Physics Notes",
  author="Ada Lovelace",
  description="Compact notes on energy and mass–energy equivalence",
  default_css="/styles/site.css"  # optional: add a baseline stylesheet link
)
@end

- `title` → `<title>`
- any other key (e.g. `author`, `description`) → `<meta name="…" content="…">`
- `default_css` adds a `<link rel="stylesheet" href="…">` after any explicit `@import` links

## 6.2 Importing external CSS

Link stylesheets you ship alongside the HTML:

@code(lang="dcz")
@import(href="/styles/site.css")
@end

Compiles to:
@code(lang="text")
<link rel="stylesheet" href="/styles/site.css">
@end

> Tip: The CLI already writes/links `docz.core.css`. If a Tailwind theme is present, it will also be linked automatically as `docz.tailwind.css`.

## 6.3 Inserting raw CSS into <head>

For small customizations that don’t deserve a separate file, embed a `@css` block.

@code(lang="dcz")
@css
/* Doc-specific tweaks */
.katex { font-size: 1.04em; }
.note  { background: #fffbcc; padding: .75rem; border-radius: .5rem; }
@end
@end

All `@css` blocks are concatenated (in order) into a single `<style>` tag in the `<head>`.

## 6.4 Declaring reusable style aliases

Use `@style(mode="global")` to define **aliases** once, then reference them by name. Each line is `alias: space-separated-classes`.

@code(lang="dcz")
@style(mode="global")
# Alias → classes (Tailwind-friendly or plain CSS classes)
heading-1: text-3xl font-bold tracking-tight
muted: text-gray-600
btn: inline-flex items-center gap-2 px-3 py-1.5 rounded-md bg-blue-600 text-white hover:bg-blue-700
@end
@end

You can then apply an alias in the body with an inline `@style`:

@code(lang="dcz")
@style(class="heading-1") Energy Basics @end

A paragraph with @style(class="muted") subtle emphasis @end continues here.
@end

Or resolve an alias explicitly by name (equivalent to `class="…"`, but a bit more self-documenting):

@code(lang="dcz")
@style(name="btn") Read more @end
@end

> Resolution rules (inline `@style`): if `class="..."` is present it wins; else if `name="..."` is present it resolves via aliases; else if `style="..."` is present inline styles are used.

## 6.5 Putting it together

A minimal head setup with all three approaches:

@code(lang="dcz")
@meta(title="Sample", author="Docz Team", default_css="/styles/base.css")

@import(href="/styles/print.css")

@css
pre code { font-size: .95em; }
.endnote { color: #666; }
@end

@style(mode="global")
lead: text-lg
figure: my-6
@end
@end

Now the body can stay clean and declarative while the head packs all global styling decisions.
